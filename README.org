#+title: GNU Emacs configuration
#+author: Pionieeri

Emacs literate configuration file.

* Init
** =Pre-early-init.el=

#+begin_src emacs-lisp :tangle "pre-early-init.el"
;;; pre-early-init.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

;; Reducing clutter in ~/.emacs.d by redirecting files to ~/emacs.d/var/
(setq minimal-emacs-var-dir (expand-file-name "var/" minimal-emacs-user-directory))
(setq package-user-dir (expand-file-name "elpa" minimal-emacs-var-dir))
(setq user-emacs-directory minimal-emacs-var-dir)

;; To prevent Emacs from saving customization information to a custom file, set custom-file to null-device:
(setq custom-file null-device)
#+end_src

** =early-init.el=

#+begin_src emacs-lisp :tangle "early-init.el"
;;; early-init.el --- Early Init -*- no-byte-compile: t; lexical-binding: t; -*-

;; Author: James Cherti
;; URL: https://github.com/jamescherti/minimal-emacs.d
;; Package-Requires: ((emacs "29.1"))
;; Keywords: maint
;; Version: 1.1.1
;; SPDX-License-Identifier: GPL-3.0-or-later

;;; Commentary:
;; The minimal-emacs.d project is a customizable base that provides better Emacs
;; defaults and optimized startup, intended to serve as a solid foundation for
;; your vanilla Emacs configuration.

;;; Code:

;;; Variables

(defvar minimal-emacs-ui-features '()
  "List of user interface features to disable in minimal Emacs setup.

This variable holds a list Emacs UI features that can be enabled:
- `context-menu`: Enables the context menu in graphical environments.
- `tool-bar`: Enables the tool bar in graphical environments.
- `menu-bar`: Enables the menu bar in graphical environments.
- `dialogs`: Enables both file dialogs and dialog boxes.
- `tooltips`: Enables tooltips.

Each feature in the list corresponds to a specific UI component that can be
turned on.")

(defvar minimal-emacs-frame-title-format "%b â€“ Emacs"
  "Template for displaying the title bar of visible and iconified frame.")

(defvar minimal-emacs-debug nil
  "Non-nil to enable debug.")

(defvar minimal-emacs-gc-cons-threshold (* 16 1024 1024)
  "The value of `gc-cons-threshold' after Emacs startup.")

(defvar minimal-emacs-package-initialize-and-refresh t
  "Whether to automatically initialize and refresh packages.
When set to non-nil, Emacs will automatically call `package-initialize' and
`package-refresh-contents' to set up and update the package system.")

(defvar minimal-emacs-user-directory user-emacs-directory
  "The default value of the `user-emacs-directory' variable.")

(defvar my/config-root-dir user-emacs-directory
  "The root directory of the Emacs configuration files.")

;;; Load pre-early-init.el

(defun minimal-emacs-load-user-init (filename)
  "Execute a file of Lisp code named FILENAME."
  (let ((user-init-file
         (expand-file-name filename
                           minimal-emacs-user-directory)))
    (when (file-exists-p user-init-file)
      (load user-init-file nil t))))

(minimal-emacs-load-user-init "pre-early-init.el")

(setq custom-theme-directory
      (expand-file-name "themes/" minimal-emacs-user-directory))
(setq custom-file (expand-file-name "custom.el" minimal-emacs-user-directory))

;;; Garbage collection
;; Garbage collection significantly affects startup times. This setting delays
;; garbage collection during startup but will be reset later.

(setq gc-cons-threshold most-positive-fixnum)

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold minimal-emacs-gc-cons-threshold)))

;;; Misc

(set-language-environment "UTF-8")

;; Set-language-environment sets default-input-method, which is unwanted.
(setq default-input-method nil)

;;; Performance

;; Prefer loading newer compiled files
(setq load-prefer-newer t)

;; Font compacting can be very resource-intensive, especially when rendering
;; icon fonts on Windows. This will increase memory usage.
(setq inhibit-compacting-font-caches t)

(unless (daemonp)
  (let ((old-value (default-toplevel-value 'file-name-handler-alist)))
    (set-default-toplevel-value
     'file-name-handler-alist
     ;; Determine the state of bundled libraries using calc-loaddefs.el.
     ;; If compressed, retain the gzip handler in `file-name-handler-alist`.
     ;; If compiled or neither, omit the gzip handler during startup for
     ;; improved startup and package load time.
     (if (eval-when-compile
           (locate-file-internal "calc-loaddefs.el" load-path))
         nil
       (list (rassq 'jka-compr-handler old-value))))
    ;; Ensure the new value persists through any current let-binding.
    (set-default-toplevel-value 'file-name-handler-alist
                                file-name-handler-alist)
    ;; Remember the old value to reset it as needed.
    (add-hook 'emacs-startup-hook
              (lambda ()
                (set-default-toplevel-value
                 'file-name-handler-alist
                 ;; Merge instead of overwrite to preserve any changes made
                 ;; since startup.
                 (delete-dups (append file-name-handler-alist old-value))))
              101))

  (unless noninteractive
    (unless minimal-emacs-debug
      (unless minimal-emacs-debug
        ;; Suppress redisplay and redraw during startup to avoid delays and
        ;; prevent flashing an unstyled Emacs frame.
        ;; (setq-default inhibit-redisplay t) ; Can cause artifacts
        (setq-default inhibit-message t)

        ;; Reset the above variables to prevent Emacs from appearing frozen or
        ;; visually corrupted after startup or if a startup error occurs.
        (defun minimal-emacs--reset-inhibited-vars-h ()
          ;; (setq-default inhibit-redisplay nil) ; Can cause artifacts
          (setq-default inhibit-message nil)
          (remove-hook 'post-command-hook #'minimal-emacs--reset-inhibited-vars-h))

        (add-hook 'post-command-hook
                  #'minimal-emacs--reset-inhibited-vars-h -100))

      (dolist (buf (buffer-list))
        (with-current-buffer buf
          (setq mode-line-format nil)))

      (put 'mode-line-format 'initial-value
           (default-toplevel-value 'mode-line-format))
      (setq-default mode-line-format nil)

      (defun minimal-emacs--startup-load-user-init-file (fn &rest args)
        "Advice for startup--load-user-init-file to reset mode-line-format."
        (unwind-protect
            (progn
              ;; Start up as normal
              (apply fn args))
          ;; If we don't undo inhibit-{message, redisplay} and there's an
          ;; error, we'll see nothing but a blank Emacs frame.
          (setq-default inhibit-message nil)
          (unless (default-toplevel-value 'mode-line-format)
            (setq-default mode-line-format
                          (get 'mode-line-format 'initial-value)))))

      (advice-add 'startup--load-user-init-file :around
                  #'minimal-emacs--startup-load-user-init-file))

    ;; Without this, Emacs will try to resize itself to a specific column size
    (setq frame-inhibit-implied-resize t)

    ;; A second, case-insensitive pass over `auto-mode-alist' is time wasted.
    ;; No second pass of case-insensitive search over auto-mode-alist.
    (setq auto-mode-case-fold nil)

    ;; Reduce *Message* noise at startup. An empty scratch buffer (or the
    ;; dashboard) is more than enough, and faster to display.
    (setq inhibit-startup-screen t
          inhibit-startup-echo-area-message user-login-name)
    (setq initial-buffer-choice nil
          inhibit-startup-buffer-menu t
          inhibit-x-resources t)

    ;; Disable bidirectional text scanning for a modest performance boost.
    (setq-default bidi-display-reordering 'left-to-right
                  bidi-paragraph-direction 'left-to-right)

    ;; Give up some bidirectional functionality for slightly faster re-display.
    (setq bidi-inhibit-bpa t)

    ;; Remove "For information about GNU Emacs..." message at startup
    (advice-add #'display-startup-echo-area-message :override #'ignore)

    ;; Suppress the vanilla startup screen completely. We've disabled it with
    ;; `inhibit-startup-screen', but it would still initialize anyway.
    (advice-add #'display-startup-screen :override #'ignore)

    ;; Shave seconds off startup time by starting the scratch buffer in
    ;; `fundamental-mode'
    (setq initial-major-mode 'fundamental-mode
          initial-scratch-message nil)

    (unless minimal-emacs-debug
      ;; Unset command line options irrelevant to the current OS. These options
      ;; are still processed by `command-line-1` but have no effect.
      (unless (eq system-type 'darwin)
        (setq command-line-ns-option-alist nil))
      (unless (memq initial-window-system '(x pgtk))
        (setq command-line-x-option-alist nil)))))

;;; Native compilation and Byte compilation

(if (and (featurep 'native-compile)
         (fboundp 'native-comp-available-p)
         (native-comp-available-p))
    ;; Activate `native-compile'
    (setq native-comp-jit-compilation t
          native-comp-deferred-compilation t  ; Obsolete since Emacs 29.1
          package-native-compile t)
  ;; Deactivate the `native-compile' feature if it is not available
  (setq features (delq 'native-compile features)))

;; Suppress compiler warnings and don't inundate users with their popups.
(setq native-comp-async-report-warnings-errors
      (or minimal-emacs-debug 'silent))
(setq native-comp-warning-on-missing-source minimal-emacs-debug)

(setq debug-on-error minimal-emacs-debug
      jka-compr-verbose minimal-emacs-debug)

(setq byte-compile-warnings minimal-emacs-debug)
(setq byte-compile-verbose minimal-emacs-debug)

;;; UI elements

(add-to-list 'default-frame-alist '(undecorated . t))

(setq frame-title-format minimal-emacs-frame-title-format
      icon-title-format minimal-emacs-frame-title-format)

;; Disable startup screens and messages
(setq inhibit-splash-screen t)

;; I intentionally avoid calling `menu-bar-mode', `tool-bar-mode', and
;; `scroll-bar-mode' because manipulating frame parameters can trigger or queue
;; a superfluous and potentially expensive frame redraw at startup, depending
;; on the window system. The variables must also be set to `nil' so users don't
;; have to call the functions twice to re-enable them.
(unless (memq 'menu-bar minimal-emacs-ui-features)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (unless (memq window-system '(mac ns))
    (setq menu-bar-mode nil)))

(unless (daemonp)
  (unless noninteractive
    (when (fboundp 'tool-bar-setup)
      ;; Temporarily override the tool-bar-setup function to prevent it from
      ;; running during the initial stages of startup
      (advice-add #'tool-bar-setup :override #'ignore)
      (define-advice startup--load-user-init-file
          (:after (&rest _) minimal-emacs-setup-toolbar)
        (advice-remove #'tool-bar-setup #'ignore)
        (when tool-bar-mode
          (tool-bar-setup))))))
(unless (memq 'tool-bar minimal-emacs-ui-features)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (setq tool-bar-mode nil))

(push '(vertical-scroll-bars) default-frame-alist)
(push '(horizontal-scroll-bars) default-frame-alist)
(setq scroll-bar-mode nil)
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))

(unless (memq 'tooltips minimal-emacs-ui-features)
  (when (bound-and-true-p tooltip-mode)
    (tooltip-mode -1)))

;; Disable GUIs because they are inconsistent across systems, desktop
;; environments, and themes, and they don't match the look of Emacs.
(unless (memq 'dialogs minimal-emacs-ui-features)
  (setq use-file-dialog nil)
  (setq use-dialog-box nil))

;;; package.el
(setq package-enable-at-startup nil)
(setq package-quickstart nil)
(setq use-package-always-ensure t)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
(customize-set-variable 'package-archive-priorities '(("melpa"    . 99)
                                                      ("gnu" . 80)
                                                      ("stable" . 70)
                                                      ("nongnu"  . 0)))

;;; Load post-early-init.el
(minimal-emacs-load-user-init "post-early-init.el")

(provide 'early-init)

;;; early-init.el ends here
#+end_src

** =init.el=

#+begin_src emacs-lisp :tangle "init.el"
;;; init.el --- Init -*- no-byte-compile: t; lexical-binding: t; -*-

;; Author: James Cherti
;; URL: https://github.com/jamescherti/minimal-emacs.d
;; Package-Requires: ((emacs "29.1"))
;; Keywords: maint
;; Version: 1.1.1
;; SPDX-License-Identifier: GPL-3.0-or-later

;;; Commentary:
;; The minimal-emacs.d project is a customizable base that provides better Emacs
;; defaults and optimized startup, intended to serve as a solid foundation for
;; your vanilla Emacs configuration.

;;; Code:

;;; Load pre-init.el
(minimal-emacs-load-user-init "pre-init.el")

;;; Networking

;; Don't ping things that look like domain names.
(setq ffap-machine-p-known 'reject)

;;; package.el
(when (bound-and-true-p minimal-emacs-package-initialize-and-refresh)
  ;; Initialize and refresh package contents again if needed
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Install use-package if necessary
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  ;; Ensure use-package is available at compile time
  (eval-when-compile
    (require 'use-package)))

;; Ensure the 'use-package' package is installed and loaded

;;; Features, warnings, and errors

;; Disable warnings from the legacy advice API. They aren't useful.
(setq ad-redefinition-action 'accept)

(setq warning-suppress-types '((lexical-binding)))

;; Some features that are not represented as packages can be found in
;; `features', but this can be inconsistent. The following enforce consistency:
(if (fboundp #'json-parse-string)
    (push 'jansson features))
(if (string-match-p "HARFBUZZ" system-configuration-features) ; no alternative
    (push 'harfbuzz features))
(if (bound-and-true-p module-file-suffix)
    (push 'dynamic-modules features))

;;; Minibuffer
;; Allow nested minibuffers
(setq enable-recursive-minibuffers t)

;; Keep the cursor out of the read-only portions of the.minibuffer
(setq minibuffer-prompt-properties
      '(read-only t intangible t cursor-intangible t face
                  minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

;;; User interface

;; By default, Emacs "updates" its ui more often than it needs to
(setq idle-update-delay 1.0)

;; Allow for shorter responses: "y" for yes and "n" for no.
(if (boundp 'use-short-answers)
    (setq use-short-answers t)
  (advice-add #'yes-or-no-p :override #'y-or-n-p))
(defalias #'view-hello-file #'ignore)  ; Never show the hello file

;;; Misc

;; switch-to-buffer runs pop-to-buffer-same-window instead
(setq switch-to-buffer-obey-display-actions t)

(setq show-paren-delay 0.1
      show-paren-highlight-openparen t
      show-paren-when-point-inside-paren t
      show-paren-when-point-in-periphery t)

(setq whitespace-line-column nil)  ; whitespace-mode

;; I reduced the default value of 9 to simplify the font-lock keyword,
;; aiming to improve performance. This package helps differentiate
;; nested delimiter pairs, particularly in languages with heavy use of
;; parentheses.
(setq rainbow-delimiters-max-face-count 5)

;; Can be activated with `display-line-numbers-mode'
(setq-default display-line-numbers-width 3)
(setq-default display-line-numbers-widen t)

(setq comint-prompt-read-only t)
(setq comint-buffer-maximum-size 2048)

(setq compilation-always-kill t
      compilation-ask-about-save nil
      compilation-scroll-output 'first-error)

(setq truncate-string-ellipsis "â€¦")

;; Delete by moving to trash in interactive mode
(setq delete-by-moving-to-trash (not noninteractive))

;; Increase how much is read from processes in a single chunk
(setq read-process-output-max (* 512 1024))  ; 512kb

;; Collects and displays all available documentation immediately, even if
;; multiple sources provide it. It concatenates the results.
(setq eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)

;; For some reason, `abbrev_defs` is located in ~/.emacs.d/abbrev_defs, even
;; when `user-emacs-directory` is modified. This ensures the abbrev file is
;; correctly located based on the updated `user-emacs-directory`.
(setq abbrev-file-name (expand-file-name "abbrev_defs" user-emacs-directory))

;;; Files

;; Disable the warning "X and Y are the same file". Ignoring this warning is
;; acceptable since it will redirect you to the existing buffer regardless.
(setq find-file-suppress-same-file-warnings t)

;; Resolve symlinks when opening files, so that any operations are conducted
;; from the file's true directory (like `find-file').
(setq find-file-visit-truename t
      vc-follow-symlinks t)

;; Skip confirmation prompts when creating a new file or buffer
(setq confirm-nonexistent-file-or-buffer nil)

(setq uniquify-buffer-name-style 'forward)

(setq mouse-yank-at-point t)

;; Prefer vertical splits over horizontal ones
(setq split-width-threshold 170
      split-height-threshold nil)

;; The native border "uses" a pixel of the fringe on the rightmost
;; splits, whereas `window-divider` does not.
(setq window-divider-default-bottom-width 1
      window-divider-default-places t
      window-divider-default-right-width 1)

;;; Backup files

;; Avoid generating backups or lockfiles to prevent creating world-readable
;; copies of files.
(setq create-lockfiles nil)
(setq make-backup-files nil)

(setq backup-directory-alist
      `(("." . ,(expand-file-name "backup" user-emacs-directory))))
(setq tramp-backup-directory-alist backup-directory-alist)
(setq backup-by-copying-when-linked t)
(setq backup-by-copying t)  ; Backup by copying rather renaming
(setq delete-old-versions t)  ; Delete excess backup versions silently
(setq version-control t)  ; Use version numbers for backup files
(setq kept-new-versions 5)
(setq kept-old-versions 5)
(setq vc-make-backup-files nil)  ; Do not backup version controlled files

;;; Auto save
;; Enable auto-save to safeguard against crashes or data loss. The
;; `recover-file' or `recover-session' functions can be used to restore
;; auto-saved data.
(setq auto-save-default t)

;; Do not auto-disable auto-save after deleting large chunks of
;; text. The purpose of auto-save is to provide a failsafe, and
;; disabling it contradicts this objective.
(setq auto-save-include-big-deletions t)

(setq auto-save-list-file-prefix
      (expand-file-name "autosave/" user-emacs-directory))
(setq tramp-auto-save-directory
      (expand-file-name "tramp-autosave/" user-emacs-directory))

;; Auto save options
(setq kill-buffer-delete-auto-save-files t)

;;; Auto revert
;; Auto-revert in Emacs is a feature that automatically updates the
;; contents of a buffer to reflect changes made to the underlying file
;; on disk.
(setq revert-without-query (list ".")  ; Do not prompt
      auto-revert-stop-on-user-input nil
      auto-revert-verbose t)

;; Revert other buffers (e.g, Dired)
(setq global-auto-revert-non-file-buffers t)

;;; recentf
;; `recentf' is an Emacs package that maintains a list of recently
;; accessed files, making it easier to reopen files you have worked on
;; recently.
(setq recentf-max-saved-items 300) ; default is 20
(setq recentf-auto-cleanup 'mode)

;;; saveplace
;; `save-place-mode` enables Emacs to remember the last location within a file
;; upon reopening. This feature is particularly beneficial for resuming work at
;; the precise point where you previously left off.
(setq save-place-file (expand-file-name "saveplace" user-emacs-directory))
(setq save-place-limit 600)

;;; savehist
;; `savehist` is an Emacs feature that preserves the minibuffer history between
;; sessions. It saves the history of inputs in the minibuffer, such as commands,
;; search strings, and other prompts, to a file. This allows users to retain
;; their minibuffer history across Emacs restarts.
(setq history-length 300)
(setq savehist-save-minibuffer-history t)  ;; Default

;;; Frames and windows

;; Resizing the Emacs frame can be costly when changing the font. Disable this
;; to improve startup times with fonts larger than the system default.
(setq frame-resize-pixelwise t)

;; However, do not resize windows pixelwise, as this can cause crashes in some
;; cases when resizing too many windows at once or rapidly.
(setq window-resize-pixelwise nil)

(setq resize-mini-windows 'grow-only)

;;; Scrolling
;; Enables faster scrolling through unfontified regions. This may result in
;; brief periods of inaccurate syntax highlighting immediately after scrolling,
;; which should quickly self-correct.
(setq fast-but-imprecise-scrolling t)

;; Move point to top/bottom of buffer before signaling a scrolling error.
(setq scroll-error-top-bottom t)

;; Keeps screen position if the scroll command moved it vertically out of the
;; window.
(setq scroll-preserve-screen-position t)

;; Emacs spends excessive time recentering the screen when the cursor moves more
;; than N lines past the window edges (where N is the value of
;; `scroll-conservatively`). This can be particularly slow in larger files
;; during extensive scrolling. If `scroll-conservatively` is set above 100, the
;; window is never automatically recentered. The default value of 0 triggers
;; recentering too aggressively. Setting it to 10 reduces excessive recentering
;; and only recenters the window when scrolling significantly off-screen.
(setq scroll-conservatively 10)

;; Enables smooth scrolling by making Emacs scroll the window by 1 line whenever
;; the cursor moves off the visible screen.
(setq scroll-step 1)

;; Reduce cursor lag by :
;; 1. Prevent automatic adjustments to `window-vscroll' for long lines.
;; 2. Resolve the issue of random half-screen jumps during scrolling.
(setq auto-window-vscroll nil)

;; Number of lines of margin at the top and bottom of a window.
(setq scroll-margin 0)

;; Horizontal scrolling
(setq hscroll-margin 2
      hscroll-step 1)

;;; Mouse Scroll

;; Emacs 29
(when (memq 'context-menu minimal-emacs-ui-features)
  (when (and (display-graphic-p) (fboundp 'context-menu-mode))
    (add-hook 'after-init-hook #'context-menu-mode)))

;;; Cursor
;; The blinking cursor is distracting and interferes with cursor settings in
;; some minor modes that try to change it buffer-locally (e.g., Treemacs).
;; Additionally, it can cause freezing, especially on macOS, for users with
;; customized and colored cursors.
(blink-cursor-mode -1)

;; Don't blink the paren matching the one at point, it's too distracting.
(setq blink-matching-paren nil)

;; Don't stretch the cursor to fit wide characters, it is disorienting,
;; especially for tabs.
(setq x-stretch-cursor nil)

;; Reduce rendering/line scan work by not rendering cursors or regions in
;; non-focused windows.
(setq-default cursor-in-non-selected-windows nil)
(setq highlight-nonselected-windows nil)

;;; Annoyances

;; No beeping or blinking
(setq visible-bell nil)
(setq ring-bell-function #'ignore)

;; This controls how long Emacs will blink to show the deleted pairs with
;; `delete-pair'. A longer delay can be annoying as it causes a noticeable pause
;; after each deletion, disrupting the flow of editing.
(setq delete-pair-blink-delay 0.03)

;;; Indent and formatting
(setq-default left-fringe-width  8)
(setq-default right-fringe-width 8)

;; Do not show an arrow at the top/bottomin the fringe and empty lines
(setq-default indicate-buffer-boundaries nil)
(setq-default indicate-empty-lines nil)

;; Continue wrapped lines at whitespace rather than breaking in the
;; middle of a word.
(setq-default word-wrap t)

;; Disable wrapping by default due to its performance cost.
(setq-default truncate-lines t)

;; If enabled and `truncate-lines' is disabled, soft wrapping will not occur
;; when the window is narrower than `truncate-partial-width-windows' characters.
(setq truncate-partial-width-windows nil)

;; Prefer spaces over tabs. Spaces offer a more consistent default compared to
;; 8-space tabs. This setting can be adjusted on a per-mode basis as needed.
(setq-default indent-tabs-mode nil
              tab-width 4)

;; Enable indentation and completion using the TAB key
(setq-default tab-always-indent nil)

;; Enable multi-line commenting which ensures that `comment-indent-new-line'
;; properly continues comments onto new lines, which is useful for writing
;; longer comments or docstrings that span multiple lines.
(setq comment-multi-line t)

;; We often split terminals and editor windows or place them side-by-side,
;; making use of the additional horizontal space.
(setq-default fill-column 80)

;; Disable the obsolete practice of end-of-line spacing from the
;; typewriter era.
(setq sentence-end-double-space nil)

;; According to the POSIX, a line is defined as "a sequence of zero or
;; more non-newline characters followed by a terminating newline".
(setq require-final-newline t)

;; Remove duplicates from the kill ring to reduce clutter
(setq kill-do-not-save-duplicates t)

;; Ensures that empty lines within the commented region are also commented out.
;; This prevents unintended visual gaps and maintains a consistent appearance,
;; ensuring that comments apply uniformly to all lines, including those that are
;; otherwise empty.
(setq comment-empty-lines t)

;; Eliminate delay before highlighting search matches
(setq lazy-highlight-initial-delay 0)

;;; Mode line

;; Setting `display-time-default-load-average' to nil makes Emacs omit the load
;; average information from the mode line.
(setq display-time-default-load-average nil)

;; Display the current line and column numbers in the mode line
(setq line-number-mode t)
(setq column-number-mode t)

;;; Filetype

;; Do not notify the user each time Python tries to guess the indentation offset
(setq python-indent-guess-indent-offset-verbose nil)

(setq sh-indent-after-continuation 'always)

;;; Dired

(setq dired-free-space nil
      dired-deletion-confirmer 'y-or-n-p
      dired-filter-verbose nil
      dired-clean-confirm-killing-deleted-buffers nil
      dired-recursive-deletes 'top
      dired-recursive-copies  'always
      dired-create-destination-dirs 'ask)

;;; Font / Text scale

;; Avoid automatic frame resizing when adjusting settings.
(setq global-text-scale-adjust-resizes-frames nil)

;;; Ediff

;; Configure Ediff to use a single frame and split windows horizontally
(setq ediff-window-setup-function #'ediff-setup-windows-plain
      ediff-split-window-function #'split-window-horizontally)

;;; Load post-init.el
(minimal-emacs-load-user-init "post-init.el")

(provide 'init)

;;; init.el ends here
#+end_src

** =Post-init.el=

#+begin_src emacs-lisp :tangle "post-init.el"
;;; post-init.el --- post-init -*- no-byte-compile: t; lexical-binding: t; -*-

;; Auto-revert in Emacs is a feature that automatically updates the
;; contents of a buffer to reflect changes made to the underlying file
;; on disk.
(add-hook 'after-init-hook #'global-auto-revert-mode)

;; recentf is an Emacs package that maintains a list of recently
;; accessed files, making it easier to reopen files you have worked on
;; recently.
(add-hook 'after-init-hook #'recentf-mode)

;; savehist is an Emacs feature that preserves the minibuffer history between
;; sessions. It saves the history of inputs in the minibuffer, such as commands,
;; search strings, and other prompts, to a file. This allows users to retain
;; their minibuffer history across Emacs restarts.
(add-hook 'after-init-hook #'savehist-mode)

;; save-place-mode enables Emacs to remember the last location within a file
;; upon reopening. This feature is particularly beneficial for resuming work at
;; the precise point where you previously left off.
(add-hook 'after-init-hook #'save-place-mode)

;; The Garbage Collector Magic Hack (gcmh-mode) optimizes Emacs'
;; garbage collection process, reducing the frequency of garbage
;; collection during normal operations and only performing it during
;; idle times. This results in smoother performance and fewer
;; interruptions, especially during intensive tasks or when working
;; with large files.

(use-package gcmh
  :hook (after-init . gcmh-mode)
  :custom
  (gcmh-idle-delay 'auto)
  (gcmh-auto-idle-delay-factor 10)
  (gcmh-low-cons-threshold minimal-emacs-gc-cons-threshold))

;;; Load files from modules
(add-to-list 'load-path (expand-file-name "modules" my/config-root-dir))


(global-visual-line-mode 1)

;;; Load post-init.el
(minimal-emacs-load-user-init "./profile-core.el")

(provide 'post-init)
;;; post-init.el ends here
#+end_src

* Modules
** =setup-yasnippets.el=
#+begin_src emacs-lisp :tangle "modules/setup-yasnippets.el" :mkdirp yes
;;; setup-yasnippets.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

(use-package yasnippet
  :config
  (yas-global-mode 1))

(setq yas-indent-line 'nothing)

(provide 'setup-yasnippets)
;;; setup-yasnippets.el ends here
#+end_src

** =setup-which-key.el=
#+begin_src emacs-lisp :tangle "modules/setup-which-key.el" :mkdirp yes
;;; setup-which-key.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

(use-package which-key
  :config
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  (setq which-key-idle-delay 0.1))

(provide 'setup-which-key)
;;; setup-which-key.el ends here
#+end_src

** =setup-age.el=

# sources https://github.com/anticomputer/age.el
# sources https://github.com/anticomputer/passage.el

#+begin_src emacs-lisp :tangle "modules/setup-age.el" :mkdirp yes
;;; setup-age.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

(use-package age
  :demand t
  :custom
  (age-program "age")
  (age-default-identity env/age-identity)
  (age-default-recipient env/age-recipients)
  (age-pinentry-mode 'ask)
  ;(age-debug t)
  :config
  (age-file-enable))

(provide 'setup-age)
;;; setup-age.el ends here
#+end_src
** =setup-avy.el=
#+begin_src emacs-lisp :tangle "modules/setup-avy.el" :mkdirp yes
;;; setup-avy.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

(use-package avy
  :config
  (setq avy-timeout-second 0.27)
  ;;(define-key global-map (kbd "C-'") 'avy-goto-char-timer)
  (setq avy-single-candidate-jump nil))

(provide 'setup-avy)
;;; setup-avy.el ends here
#+end_src

** =setup-magit.el=
#+begin_src emacs-lisp :tangle "modules/setup-magit.el" :mkdirp yes
;;; setup-magit.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

(use-package magit
  :bind
  ("M-g" . magit-status))

;;(defun save-and-commit ()
  ;;(interactive)
  ;;(save-buffer)
  ;;(magit-stage-file buffer-file-name)
  ;;(magit-commit))
;;
;;(add-hook 'after-save-hook 'save-and-commit)
;;(remove-hook 'after-save-hook 'save-and-commit)

(provide 'setup-magit)
;;; setup-magit.el ends here
#+end_src

** =setup-ace-window.el=
#+begin_src emacs-lisp :tangle "modules/setup-ace-window.el" :mkdirp yes
;;; setup-ace-window.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

(use-package ace-window
  :defer t
  :bind ("M-b" . ace-window)
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

(provide 'setup-ace-window)
;;; setup-ace-window.el ends here
#+end_src

** =setup-minibuffer.el=
#+begin_src emacs-lisp :tangle "modules/setup-minibuffer.el" :mkdirp yes
;;; setup-minibuffer.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

(use-package vertico
  :init
  (vertico-mode))
  ;(setq vertico-cycle t))

(use-package marginalia
  :after vertico
  :init (marginalia-mode))
  

(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))

(provide 'setup-minibuffer)
;;; setup-minibuffer.el ends here
#+end_src

** =setup-consult.el=
#+begin_src emacs-lisp :tangle "modules/setup-consult.el" :mkdirp yes
;;; setup-consult.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

;; current

(use-package consult
  :after vertico
  :bind (("M-y" . consult-yank-from-kill-ring)
         ("C-x b" . consult-buffer)
         ("C-x r" . consult-ripgrep)
         ("C-x C-f" . consult-fd)))

(provide 'setup-consult)
;;; setup-consult.el ends here
#+end_src

** =setup-global-keys.el=
#+begin_src emacs-lisp :tangle "modules/setup-global-keys.el" :mkdirp yes
;;; setup-global-keys.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

;; Org mode
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c a") 'org-agenda)

(defun my/increase-frame-text-size ()
  "Increase the default text size for the entire frame."
  (interactive)
  (let ((current-size (face-attribute 'default :height)))
    (set-face-attribute 'default nil :height (+ current-size 10))))

(defun my/decrease-frame-text-size ()
  "Decrease the default text size for the entire frame."
  (interactive)
  (let ((current-size (face-attribute 'default :height)))
    (set-face-attribute 'default nil :height (- current-size 10))))

;; Bind these to your preferred keybindings
(global-set-key (kbd "C-+") 'my/increase-frame-text-size)
(global-set-key (kbd "C--") 'my/decrease-frame-text-size)

;; recommended avy keybindings
;(global-set-key (kbd "C-:") 'avy-goto-char)
;(global-set-key (kbd "C-'") 'avy-goto-char-2)
;(global-set-key (kbd "M-g f") 'avy-goto-line)
;(global-set-key (kbd "M-g w") 'avy-goto-word-1)
;(global-set-key (kbd "M-g e") 'avy-goto-word-0)
;
;;; additional avy keybindings
;(global-set-key (kbd "s-,") 'avy-goto-char)
;(global-set-key (kbd "s-.") 'avy-goto-word-or-subword-1)
;(global-set-key (kbd "C-c v") 'avy-goto-word-or-subword-1)

;; improved window navigation with ace-window
;(global-set-key (kbd "s-w") 'ace-window)
;(global-set-key [remap other-window] 'ace-window)

(provide 'setup-global-keys)
;;; setup-global-keys.el ends here
#+end_src

** =setup-dired.el=
#+begin_src emacs-lisp :tangle "modules/setup-dired.el" :mkdirp yes
;;; setup-dired.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

;; Dired
(with-eval-after-load 'dired
  (setq dired-dwim-target t
        dired-always-read-filesystem t
        dired-hide-details-hide-symlink-targets nil))
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
(add-hook 'dired-mode-hook 'dired-omit-mode)

(setq dired-kill-when-opening-new-dired-buffer t)

;; (use-package dired-open
;;   :config
;;   (setq dired-open-extensions '(("png" . "imw")
;;                                 ("jpg" . "imw")
;;                                 ("mp3" . "mpv")
;;                                 ("mkv" . "mpv")
;;                                 ("mp4" . "mpv")
;;                                 ("opus" . "mpv"))))

;; dired-listing-switches "-Alh"
;; dired-use-ls-dired t
;; dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\|\\`[.].*\\'"
;; dired-isearch-filenames 'dwim))

(provide 'setup-dired)
;;; setup-dired.el ends here
#+end_src

** =setup-denote.el=

*** denote
#+begin_src emacs-lisp :tangle "modules/setup-denote.el" :mkdirp yes
;;; setup-denote.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

;; DENOTE

(use-package denote
  :pin gnu
  :hook (dired-mode . denote-dired-mode)
  :init
  ;; Remember to check the doc strings of those variables.
  (setq denote-directory (expand-file-name env/denote-directory))
  (setq denote-save-buffer-after-creation t)
  (setq denote-prompts '(title))
  (denote-rename-buffer-mode 1))

(require 'setup-denote-journal)

(provide 'setup-denote)
;;; setup-denote.el ends here
#+end_src

*** =setup-denote-keybindings.el=
#+begin_src emacs-lisp :tangle "modules/setup-denote-keybindings.el" :mkdirp yes
;;; setup-denote-keybindings.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

;; DENOTE KEYBINDINGS

 (let ((map global-map))
   ;; default
   (define-key map (kbd "C-c n n") #'denote)
   (define-key map (kbd "C-c n c") #'denote-region) ; "contents" mnemonic
   (define-key map (kbd "C-c n N") #'denote-type)
   (define-key map (kbd "C-c n d") #'denote-date)
   (define-key map (kbd "C-c n z") #'denote-signature) ; "zettelkasten" mnemonic
   (define-key map (kbd "C-c n s") #'denote-subdirectory)
   (define-key map (kbd "C-c n t") #'denote-template)
   (define-key map (kbd "C-c n i") #'denote-link) ; "insert" mnemonic
   (define-key map (kbd "C-c n I") #'denote-add-links)
   (define-key map (kbd "C-c n b") #'denote-backlinks)
   (define-key map (kbd "C-c n f f") #'denote-find-link)
   (define-key map (kbd "C-c n f b") #'denote-find-backlink)
   (define-key map (kbd "C-c n r") #'denote-rename-file)
   (define-key map (kbd "C-c n R") #'denote-rename-file-using-front-matter))

 ;; Key bindings specifically for Dired.
 (let ((map dired-mode-map))
   (define-key map (kbd "C-c C-d C-i") #'denote-link-dired-marked-notes)
   (define-key map (kbd "C-c C-d C-r") #'denote-dired-rename-files)
   (define-key map (kbd "C-c C-d C-k") #'denote-dired-rename-marked-files-with-keywords)
   (define-key map (kbd "C-c C-d C-R") #'denote-dired-rename-marked-files-using-front-matter))


(provide 'setup-denote-keybindings)
;;; setup-denote-keybindings.el ends here
#+end_src

*** =setup-denote-journal.el=
#+begin_src emacs-lisp :tangle "modules/setup-denote-journal.el" :mkdirp yes
;;; setup-denote-journal.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

(use-package denote-journal
  :ensure t
  ;; Bind those to some key for your convenience.
  :commands ( denote-journal-new-entry
              denote-journal-new-or-existing-entry
              denote-journal-link-or-create-entry )
  :hook (calendar-mode . denote-journal-calendar-mode)
  :config
  ;; Use the "journal" subdirectory of the `denote-directory'.  Set this
  ;; to nil to use the `denote-directory' instead.
  (setq denote-journal-directory
        (expand-file-name "journal" denote-directory))
  ;; Default keyword for new journal entries. It can also be a list of
  ;; strings.
  (setq denote-journal-keyword "journal")
  ;; Read the doc string of `denote-journal-title-format'.
  (setq denote-journal-title-format "%d-%m-%Y"))

(with-eval-after-load 'org-capture
  (add-to-list 'org-capture-templates
               '("d" "Daily Journal" entry
                 (file denote-journal-path-to-new-or-existing-entry)
                 "* %U %?\n%i\n%a"
                 :kill-buffer t
                 :empty-lines 1)))

(provide 'setup-denote-journal)
;;; setup-denote-journal.el ends here
#+end_src

*** =setup-denote-org.el=
#+begin_src emacs-lisp :tangle "modules/setup-denote-org.el" :mkdirp yes
;;; setup-denote-org.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-



(provide 'setup-denote-org)
;;; setup-denote-org.el ends here
#+end_src

*** =setup-denote-sequence.el=
#+begin_src emacs-lisp :tangle "modules/setup-denote-sequence.el" :mkdirp yes
;;; setup-denote-sequence.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-



(provide 'setup-denote-sequence)
;;; setup-denote-sequence.el ends here
#+end_src

** =setup-gptel.el=
#+begin_src emacs-lisp :tangle "modules/setup-gptel.el" :mkdirp yes
;;; setup-gptel.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

(use-package gptel
  :pin melpa
  :config
  (global-set-key (kbd "M-s") 'gptel-send)
  (setq gptel-default-mode 'org-mode)
  (setq gptel--system-message nil)
  (setq gptel-org-branching-context t)
  )

;; Ollama
;(gptel-make-ollama "Ollama"
;  :host "localhost:11434"
;  :stream t
;  :models '("llama3.2:3b" "llama3.2:1b" "gemma2:2b"))

(provide 'setup-gptel)
;;; setup-gptel.el ends here
#+end_src

** =setup-gptel-custom.el=
#+begin_src emacs-lisp :tangle "modules/setup-gptel-custom.el" :mkdirp yes
;;; setup-gptel-custom.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-


;; (defun my-code-review ()                                                                                                     ;;
;;   "Review selected code and display feedback in echo area"                                                                   ;;
;;   (interactive)                                                                                                              ;;
;;   (when (use-region-p)                                                                                                       ;;
;;     (gptel-request                                                                                                           ;;
;;      (buffer-substring (region-beginning) (region-end))                                                                      ;;
;;      :system "You are a senior code reviewer. Provide concise feedback on code quality, potential bugs, and improvements."   ;;
;;      :callback (lambda (response info)                                                                                       ;;
;;                  (if (stringp response)                                                                                      ;;
;;                      (message "Code review: %s" response)                                                                    ;;
;;                    (message "Review failed: %s" (plist-get info :status)))))))                                               ;;
;;                                                                                                                              ;;
;; (global-set-key (kbd "C-c r") #'my-code-review)                                                                              ;;
;;                                                                                                                              ;;
;;                                                                                                                              ;;
;; (defun my-translate-text ()                                                                                                  ;;
;;   "Translate selected text with streaming output"                                                                            ;;
;;   (interactive)                                                                                                              ;;
;;   (when (use-region-p)                                                                                                       ;;
;;     (let ((start (region-beginning))                                                                                         ;;
;;           (end (region-end)))                                                                                                ;;
;;       (gptel-request                                                                                                         ;;
;;        (buffer-substring start end)                                                                                          ;;
;;        :system "Translate the following text to English. Provide only the translation."                                      ;;
;;        :stream t                                                                                                             ;;
;;        :callback (lambda (response info)                                                                                     ;;
;;                    (cond                                                                                                     ;;
;;                     ((stringp response)                                                                                      ;;
;;                      ;; Insert streaming chunks                                                                              ;;
;;                      (save-excursion                                                                                         ;;
;;                        (goto-char end)                                                                                       ;;
;;                        (insert response)))                                                                                   ;;
;;                     ((eq response t)                                                                                         ;;
;;                      ;; Stream complete                                                                                      ;;
;;                      (message "Translation complete"))))))))                                                                 ;;
;;                                                                                                                              ;;
;; (global-set-key (kbd "C-c t") #'my-translate-text)                                                                           ;;


;;(provide 'setup-gptel-custom)
;;; setup-gptel-custom.el ends here
#+end_src



** =setup-org-mode.el=
#+begin_src emacs-lisp :tangle "modules/setup-org-mode.el" :mkdirp yes
;;; setup-org-mode.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

(setq org-directory env/org-directory)
;;(setq org-agenda-files (list org-directory))
(setq org-agenda-files nil)
(setq org-archive-location (concat org-directory "archive.org::* From %s"))
;; (setq org-refile-targets)

(setq org-edit-src-content-indentation 0)
(setq org-hide-leading-stars t)
(setq org-hide-emphasis-markers nil)
(setq org-hide-macro-markers nil)
(setq org-link-descriptive nil)
(setq org-src-window-setup 'current-window)
(setq org-link-descriptive t)
(setq org-startup-folded 'fold)
(setq org-ellipsis nil)

(setq org-capture-templates env/org-capture)

(setq org-src-preserve-indentation t)

(provide 'setup-org-mode)
;;; setup-org-mode.el ends here
#+end_src

** =setup-elfeed.el=
#+begin_src emacs-lisp :tangle "modules/setup-elfeed.el" :mkdirp yes
;;; setup-elfeed.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

(use-package elfeed
:config
(setq elfeed-feeds env/elfeeds))

(provide 'setup-elfeed)
;;; setup-elfeed.el ends here
#+end_src

** =setup-goodies.el=
#+begin_src emacs-lisp :tangle "modules/setup-goodies.el" :mkdirp yes
;;; setup-goodies.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

(use-package markdown-mode)
(use-package olivetti)

(provide 'setup-goodies)
;;; setup-goodies.el ends here
#+end_src

** =setup-ef-themes.el=
#+begin_src emacs-lisp :tangle "modules/setup-ef-themes.el" :mkdirp yes
;;; setup-ef-themes.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

(use-package ef-themes
  :init
  (load-theme 'ef-melissa-dark :no-confirm)
  (setq ef-themes-to-toggle '(ef-melissa-dark ef-melissa-light)))

(provide 'setup-ef-themes)
;;; setup-ef-themes.el ends here
#+end_src

** =setup-nov.el=
#+begin_src emacs-lisp :tangle "modules/setup-nov.el" :mkdirp yes
;;; setup-nov.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-

;; https://depp.brause.cc/nov.el/

(use-package nov
  :init
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))

(provide 'setup-nov)
;;; setup-nov.el ends here
#+end_src
